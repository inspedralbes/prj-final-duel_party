1
<template>
  <div class="container">
    <!-- Barra de progreso -->
    <div
      class="progress-bar"
      :style="{
        width: progressBarWidth + '%',
        backgroundColor: getBarColor(progressBarWidth)
      }"
    ></div>

    <!-- Botón para confirmar si has acertado -->
    <button @click="checkIfCorrect">¡Verificar!</button>

    <!-- Mensaje de éxito o fallo -->
    <p v-if="result !== null">{{ resultMessage }}</p>
  </div>
</template>

<script setup>
import { ref, watch } from 'vue';

// Estado de la barra (100 a 0%)
const progressBarWidth = ref(100);  // Comienza en 100%
const result = ref(null); // Resultado de la verificación (null, 'acertaste', 'fallaste')
const resultMessage = ref('');

// Lógica para verificar si has acertado
const checkIfCorrect = () => {
  if (progressBarWidth.value >= 45 && progressBarWidth.value <= 65) {
    result.value = 'acertaste';
    resultMessage.value = '¡3 puntos!';
  }else if (progressBarWidth.value >= 5 && progressBarWidth.value <= 25) {
    result.value = 'acertaste';
    resultMessage.value = '¡2 puntos!';
  }
  else {
    result.value = 'fallaste';
    resultMessage.value = '¡Fallaste! Intenta de nuevo.';
  }
 

};

// Función para cambiar el color de la barra
const getBarColor = (progress) => {
  if (progress >= 45 && progress <= 65) {
    return 'blue'; // Color cuando está en el rango deseado
  }
  if (progress >= 5 && progress <= 25) {
    return 'red'; // Color cuando está en el rango deseado
  }
  return 'green'; // Color por defecto
};

// Decrementar la barra de progreso automáticamente
let interval;
const startProgress = () => {
  interval = setInterval(() => {
    if (progressBarWidth.value > 0) {
      progressBarWidth.value -= 1;  // Decrementar la barra
    } else {
      // Reiniciar la barra cuando llegue a 0
      progressBarWidth.value = 100;
      result.value = null; // Resetear el resultado
    }
  }, 25); // La barra disminuye 1% cada 50ms
};

// Iniciar el progreso cuando el componente se monte
startProgress();

// Limpiar el intervalo al destruir el componente
watch(progressBarWidth, (newValue) => {
  if (newValue === 100) {
    clearInterval(interval);
    startProgress(); // Reiniciar la barra
  }
});
</script>

<style scoped>
.container {
  width: 300px;
  height: 150px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.progress-bar {
  height: 30px;
  transition: width 0.5s;
}

button {
  margin-top: 20px;
}

p {
  color: green;
  font-weight: bold;
}
</style>


2
<template>
  <div class="container">
    <!-- Barra de progreso -->
    <div class="progress-bar">
      <!-- Rango visualizado (45% - 65%) -->
      <div class="highlight-start"></div>
      <div class="highlight-range"></div>
      <div class="highlight-end"></div>

      <!-- El marcador (palo) que se mueve de izquierda a derecha -->
      <div
        class="marker"
        :style="{ left: markerPosition + '%' }"
      ></div>
    </div>

    <!-- Botón para confirmar si has acertado -->
    <button @click="checkIfCorrect">¡Verificar!</button>

    <!-- Mensaje de éxito o fallo -->
    <p v-if="result !== null">{{ resultMessage }}</p>
  </div>
</template>

<script setup>
import { ref } from 'vue';

// Estado del marcador (palo) en la barra (de 0 a 100%)
const markerPosition = ref(0);

// Resultado de la verificación
const result = ref(null); 
const resultMessage = ref('');

// Lógica para verificar si el marcador está dentro del rango correcto (45% - 65%)
const checkIfCorrect = () => {
  if (markerPosition.value >= 40 && markerPosition.value <= 60) {
    result.value = '3 puntos';
    resultMessage.value = '¡3 puntos!';
  } else if ((markerPosition.value >= 0 && markerPosition.value <= 20) || (markerPosition.value >= 80 && markerPosition.value <= 100)  ) {
    result.value = '2 puntos';
    resultMessage.value = '¡2 puntos!';
  } else {
    result.value = 'fallaste';
  
    resultMessage.value = '¡Fallaste! Intenta de nuevo.';
  }
};

// Función para mover el marcador de un lado a otro
const moveMarker = () => {
  let direction = 1; // 1 significa que el marcador se mueve hacia la derecha
  const interval = setInterval(() => {
    if (markerPosition.value >= 100) {
      direction = -1; // Cuando llega al final, empieza a moverse hacia la izquierda
    } else if (markerPosition.value <= 0) {
      direction = 1; // Cuando llega al principio, empieza a moverse hacia la derecha
    }

    markerPosition.value += direction;

  }, 10); // Mueve el marcador cada 30ms (más rápido o más lento según desees)
};

// Iniciar el movimiento del marcador cuando el componente se monte
moveMarker();
</script>

<style scoped>
.container {
  width: 300px;
  height: 150px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.progress-bar {
  width: 100%;
  height: 30px;
  background-color: #ddd;
  position: relative;
  margin-bottom: 20px;
}

.highlight-range {
  position: absolute;
  top: 0;
  left: 40%;
  width: 20%; /* De 45% a 65% */
  height: 100%;
  background-color: rgba(0, 0, 255); /* Fondo amarillo translúcido */
  pointer-events: none; /* Para que no interfiera con el marcador */
}
.highlight-start {
  position: absolute;
  top: 0;
  left: 0%;
  width: 20%; /* De 45% a 65% */
  height: 100%;
 background-color: rgba(255, 0,0); /* Fondo amarillo translúcido */
  pointer-events: none; /* Para que no interfiera con el marcador */
}
.highlight-end {
  position: absolute;
  top: 0;
  left: 80%;
  width: 20%; /* De 45% a 65% */
  height: 100%;
  background-color: rgba(255, 0,0); /* Fondo amarillo translúcido */
  pointer-events: none; /* Para que no interfiera con el marcador */
}

.marker {
  width: 20px; /* El tamaño del "palo" */
  height: 30px;
  background-color: green; /* Color del marcador */
  position: absolute;
  top: 0;
}

button {
  margin-top: 20px;
}

p {
  color: green;
  font-weight: bold;
}
</style>

